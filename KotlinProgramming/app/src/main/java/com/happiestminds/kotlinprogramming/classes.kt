package com.happiestminds.kotlinprogramming

// toString(), copy(), equals() - autogenerated by compiler
// data classes - cannot be open/abstract
data class Point(var x: Int, var y: Int)

// defaultly open - cannot instantiate
abstract class Vehicle(val noOfWheels: Int, var make: String) {

    fun start(){ println("Starting $make")}
    abstract fun stop()

}

class Car (wheels: Int, make: String): Vehicle(wheels, make){
    override fun stop() {
        println("Stopping car")
    }


}

enum class PaymentType{
    CreditCard, DebitCard, UPI, COD
}

fun doPayment(amount: Int, type: PaymentType){
    when (type) {
        PaymentType.COD -> println("Paying $amount by cash")
        PaymentType.CreditCard -> println("Paying $amount by Credit Card")
        PaymentType.DebitCard -> println("Paying $amount by Debit card")
        PaymentType.UPI -> println("Paying $amount by UPI")
    }
}

fun main() {
    doPayment(1000, PaymentType.CreditCard)

    val myVehicle = Car(4, "Hundai Sonata")
    myVehicle.start()
    myVehicle.stop()

    val p1 = Point(1,1)
    println(p1)

    val p2 = Point(1,1)

    if (p1 == p2){
        println("Same")
    }
    else {
        println("diff")
    }
}

